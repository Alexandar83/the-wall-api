services:
  redis:
    image: redis:7.4.1
    container_name: redis_data_dev
    ports:
      - 6379:6379
    volumes:
      # Persist the redis data in a docker volume
      - redis_data_dev:/data
      - ../../config/envs/common/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf

  postgres:
    image: postgres:15.3
    container_name: postgres_data_dev
    ports:
      - 5432:5432
    volumes:
      # Persist the postgres data in a docker volume
      - postgres_data_dev:/var/lib/postgresql/data
    env_file:
      - ../../config/envs/dev/postgres_dev.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 1s  # How often to check
      timeout: 5s    # How long to wait for a response
      retries: 5     # How many retries before marking as unhealthy
    
  wait_for_postgres:
  # A wait service to facilitate the DB migrations after the composition is created
    image: busybox:1.36.1
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: sh -c "echo"

  celery_worker_1:
    image: ghcr.io/alexandar83/the-wall-api:latest
    container_name: celery_worker_1_dev
    build:
      context: ../..
      dockerfile: ./config/docker/Dockerfile.dev
      target: the_wall_api_image
    command: sh -c "/app/config/docker/scripts/start_celery_computation_worker.sh"
    volumes:
      - ../..:/app
    env_file:
      - ../../config/envs/dev/the_wall_api_dev.env
    environment:
      - STARTED_FROM_CELERY_SERVICE=True
    healthcheck:
      test: ["CMD-SHELL", "celery -A config status"]
      interval: 2s    # How often to check
      timeout: 8s     # How long to wait for a response
      retries: 5      # How many retries before marking as unhealthy

  celery_worker_2:
    image: ghcr.io/alexandar83/the-wall-api:latest
    container_name: celery_worker_2_dev
    command: sh -c "celery -A config worker --loglevel=info --queues=file_tasks --concurrency=1"
    volumes:
      - ../..:/app
    env_file:
      - ../../config/envs/dev/the_wall_api_dev.env
    environment:
      - STARTED_FROM_CELERY_SERVICE=True
    healthcheck:
      test: ["CMD-SHELL", "celery -A config status"]
      interval: 2s    # How often to check
      timeout: 8s     # How long to wait for a response
      retries: 5      # How many retries before marking as unhealthy

  celery_beat:
    image: ghcr.io/alexandar83/celery-lightweight:latest
    container_name: celery_beat_dev
    build:
      context: ../..
      dockerfile: ./config/docker/Dockerfile.dev
      target: celery_lightweight_image
    # Start Celery beat and generate the schedule outside the mounted /app folder, to avoid local creation
    # Persist the schedule in a docker volume
    command: sh -c "celery -A config beat --loglevel=info -s /var/lib/celery/data/celerybeat-schedule"
    volumes:
      - ../..:/app
      - celery_beat_schedule:/var/lib/celery/data
    env_file:
      - ../../config/envs/dev/the_wall_api_dev.env
    environment:
      - LIGHT_CELERY_CONFIG=True
      - STARTED_FROM_CELERY_SERVICE=True
    depends_on:
      celery_worker_1:
        condition: service_healthy
      celery_worker_2:
        condition: service_healthy

volumes:
  redis_data_dev:
    name: the_wall_api_redis_data_dev
  postgres_data_dev:
    name: the_wall_api_postgres_data_dev
  celery_beat_schedule:
    name: the_wall_api_celery_beat_schedule_dev