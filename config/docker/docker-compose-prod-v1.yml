services:
  the_wall_api:
    image: ghcr.io/alexandar83/the-wall-api:latest
    container_name: app
    ports:
      - 8000:8000
    command: >
      sh -c "python manage.py makemigrations the_wall_api &&
             python manage.py migrate &&
             exec gunicorn --bind 0.0.0.0:8000 config.wsgi"
    env_file:
      - ../../config/envs/prod/the_wall_api_prod.env
      - ../../config/envs/prod/redis_prod.env
      - ../../config/envs/prod/postgres_prod.env
    environment:
      - PROJECT_MODE=prod_v1
    depends_on:
      postgres:
        condition: service_healthy  # Wait for PostgreSQL health check to pass
    volumes:
      - shared_sim_logs:/app/logs

  redis:
    image: redis:7.4.1
    container_name: redis_data_prod
    ports:
      - 6379:6379
    volumes:
      - the_wall_api_redis_data_prod:/data
      - ../../config/envs/common/redis.conf:/usr/local/etc/redis/redis.conf
    command: sh -c 'redis-server /usr/local/etc/redis/redis.conf --requirepass "$$REDIS_PASSWORD"'
    env_file:
      - ../../config/envs/prod/redis_prod.env
  
  postgres:
    image: postgres:15.3
    container_name: postgres_data_prod
    ports:
      - 5432:5432
    volumes:
      - the_wall_api_postgres_data_prod:/var/lib/postgresql/data
    env_file:
      - ../../config/envs/prod/postgres_prod.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 2s  # How often to check
      timeout: 5s    # How long to wait for a response
      retries: 5     # How many retries before marking as unhealthy

  celery_worker_1:
    image: ghcr.io/alexandar83/the-wall-api:latest
    container_name: celery_worker_1_prod
    command: sh -c "/app/config/docker/scripts/start_celery_computation_worker.sh"
    env_file:
      - ../../config/envs/prod/the_wall_api_prod.env
      - ../../config/envs/prod/redis_prod.env
      - ../../config/envs/prod/postgres_prod.env
    environment:
      - PROJECT_MODE=prod_v1
    healthcheck:
      test: ["CMD-SHELL", "celery -A config status"]
      interval: 2s    # How often to check
      timeout: 8s     # How long to wait for a response
      retries: 5      # How many retries before marking as unhealthy
    # Shared access with the app so the worker can manage the simulation logs
    volumes:
      - shared_sim_logs:/app/logs

  celery_worker_2:
    image: ghcr.io/alexandar83/the-wall-api:latest
    container_name: celery_worker_2_prod
    command: sh -c "celery -A config worker --loglevel=info --queues=file_tasks --concurrency=1"
    env_file:
      - ../../config/envs/prod/the_wall_api_prod.env
      - ../../config/envs/prod/redis_prod.env
      - ../../config/envs/prod/postgres_prod.env
    environment:
      - PROJECT_MODE=prod_v1
    healthcheck:
      test: ["CMD-SHELL", "celery -A config status"]
      interval: 2s    # How often to check
      timeout: 8s     # How long to wait for a response
      retries: 5      # How many retries before marking as unhealthy
    # Shared access with the app so the worker can manage the simulation logs
    volumes:
      - shared_sim_logs:/app/logs

  celery_beat:
    image: ghcr.io/alexandar83/celery-lightweight:latest
    container_name: celery_beat_prod
    # Start Celery beat and generate the schedule outside the mounted /app folder, to avoid local creation
    # Persist the schedule in a docker volume
    command: sh -c "celery -A config beat --loglevel=info -s /var/lib/celery/data/celerybeat-schedule"
    volumes:
      - celery_beat_schedule:/var/lib/celery/data
    env_file:
      - ../../config/envs/prod/the_wall_api_prod.env
      - ../../config/envs/prod/redis_prod.env
      - ../../config/envs/prod/postgres_prod.env
    environment:
      - LIGHT_CELERY_CONFIG=True
      - PROJECT_MODE=prod_v1
    depends_on:
      celery_worker_1:
        condition: service_healthy
      celery_worker_2:
        condition: service_healthy

volumes:
  the_wall_api_redis_data_prod:
    name: the_wall_api_redis_data_prod
  the_wall_api_postgres_data_prod:
    name: the_wall_api_postgres_data_prod
  celery_beat_schedule:
    name: the_wall_api_celery_beat_schedule_prod
  shared_sim_logs:
    name: the_wall_api_shared_sim_logs_prod